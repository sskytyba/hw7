worker_processes auto;

events { worker_connections 1024; }

http {
    default_type  application/octet-stream;

    keepalive_timeout  65;

    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=all:10m max_size=2g;

    server {
        listen 80;

        location = /favicon.ico {
          log_not_found off;
        }

        location / {

            if ($request_method = PURGE ) {
                content_by_lua_block {
                    filename = "/data/nginx/cache"
                    local f = io.open(filename, "r")
                    if (f~=nil) then
                        io.close(f)
                        os.execute('rm -rf "'..filename..'"')
                    end
                    ngx.say("OK")
                    ngx.exit(ngx.OK)
                }
            }

            proxy_set_header Host $host;
            proxy_pass http://app:8080;
        }

        location ~* \.(jpg|jpeg|gif|png|bmp) {
            set $proxy_cache_key $host$uri;

            proxy_set_header Host $host;

            proxy_cache all;
            proxy_cache_valid any 1h;
            proxy_pass http://app:8080;
            proxy_cache_key $proxy_cache_key;
            proxy_cache_min_uses 2;

            if ($request_method = PURGE ) {
                set $lua_purge_path "/data/nginx/cache";
                set $lua_purge_levels "1:2";

                content_by_lua_block {
                    local md5 = ngx.md5

                    function file_exists(name)
                            local f = io.open(name, "r")
                            if f~=nil then io.close(f) return true else return false end
                    end

                    function explode(d, p)
                            local t, ll
                            t={}
                            ll=0
                            if(#p == 1) then return {p} end
                                    while true do
                                            l=string.find(p, d, ll, true) -- find the next d in the string
                                            if l~=nil then -- if "not not" found then..
                                                    table.insert(t, string.sub(p, ll, l-1)) -- Save it in our array.
                                                    ll=l+1 -- save just after where we found it for searching next time.
                                            else
                                                    table.insert(t, string.sub(p, ll)) -- Save whats left in our array.
                                                    break -- Break at end, as it should be, according to the lua manual.
                                            end
                                    end
                            return t
                    end

                    function cache_filename(cache_path, cache_levels, cache_key)
                            local md5sum = md5(cache_key)
                            local levels = explode(":", cache_levels)
                            local filename = ""

                            local index = string.len(md5sum)
                            for k, v in pairs(levels) do
                                    local length = tonumber(v)
                                    -- add trailing [length] chars to index
                                    index = index - length;
                                    filename = filename .. md5sum:sub(index+1, index+length) .. "/";
                            end
                            if cache_path:sub(-1) ~= "/" then
                                    cache_path = cache_path .. "/";
                            end
                            filename = cache_path .. filename .. md5sum
                            return filename
                    end

                    function purge(filename)
                            if (file_exists(filename)) then
                                    os.remove(filename)
                            end
                    end

                    if ngx ~= nil then
                            ngx.say(ngx.var.lua_purge_levels)
                            local filename = cache_filename(ngx.var.lua_purge_path, ngx.var.lua_purge_levels, ngx.var.proxy_cache_key)
                            purge(filename)
                            ngx.say("OK")
                            ngx.exit(ngx.OK)
                    end
                }
            }
        }
    }
}